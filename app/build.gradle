apply plugin: 'com.android.application'
apply plugin: MyBuildScrPlugin
//apply plugin: 'com.example.gradle.plugin'

def configInfo = rootProject.ext.android

print(configInfo)

android {
    compileSdkVersion configInfo.compileSdkVersion
    buildToolsVersion configInfo.buildToolsVersion
    defaultConfig {
        applicationId "com.android.study.example"
        minSdkVersion configInfo.minSdkVersion
        targetSdkVersion configInfo.targetSdkVersion
        versionCode configInfo.versionCode
        versionName configInfo.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        //启用renderscript
//        renderscriptTargetApi = 18
//        renderscriptSupportModeEnabled = true

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // https://www.jianshu.com/p/aa51a3e007e2  单元测试
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            outputs.upToDateWhen { false }
            showStandardStreams = true
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    annotationProcessor project(':lib-anno-processors')
    implementation project(':lib-annotaions')
    //noinspection GradleCompatible
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.android.support:design:28.0.0'

    implementation "com.android.support:recyclerview-v7:28.0.0"

    implementation 'com.jakewharton:butterknife:8.8.1'

    testImplementation 'junit:junit:4.12'
    testImplementation "org.robolectric:robolectric:3.3.2"

    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
    // okhttp
    implementation 'com.squareup.okhttp3:okhttp:3.11.0'

    // 屏幕适配   https://github.com/JessYanCoding/AndroidAutoSize
    implementation 'me.jessyan:autosize:1.0.1'

    // rx运行是权限
    implementation 'io.reactivex:rxandroid:1.1.0'
    implementation 'com.tbruyelle.rxpermissions:rxpermissions:0.7.0@aar'

    // 开源有进度webview
    implementation 'com.github.youlookwhat:WebProgress:1.1.0'

    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6'

    // 开源webview
    implementation 'com.just.agentweb:agentweb:4.1.3' // (必选)

    implementation 'com.jaeger.statusbarutil:library:1.5.1'

    implementation "org.java-websocket:Java-WebSocket:1.5.1"

    implementation project(':libyuv')
    implementation project(':mx-filepicker')

    implementation 'com.yanzhenjie:album:2.1.3'

//    implementation 'com.github.nguyenhoanglam:ImagePicker:1.4.1'

    // glide
    implementation ("com.github.bumptech.glide:glide:4.6.1") {
        exclude group: "com.android.support"
    }
    implementation 'com.github.bumptech.glide:annotations:4.6.1'

    // test ff
    // test ee e e
}

task generateSvnInfo() {
    doLast {
        def hash = ""
        new ByteArrayOutputStream().withStream { os ->
            def result = exec {
                commandLine = ['git', 'log', '--pretty=format:%H%n%ci', '-1']
                standardOutput = os
            }
            hash = os.toString()
        }
        println ">>> git info:" + hash
        def info = hash.split("\n")

        def branch = ""
        new ByteArrayOutputStream().withStream { os ->
            exec {
                commandLine = ['git', 'status', '-b', '-s', '-u', 'no']
                standardOutput = os
            }
            branch = os.toString().replace("\n", "")
        }
        println ">>> git branch:" + branch
        new File(project.projectDir.absolutePath + '/src/main/assets/version.txt').text = "" +
                "git-branch: " + branch +
                "\ncommit-hash: " + info[0] +
                "\ndate: " + info[1]
    }
}

afterEvaluate {
    tasks.preBuild.dependsOn generateSvnInfo
}
